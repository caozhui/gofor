// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: exploit.ext.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ExploitServiceExt service

type ExploitServiceExtService interface {
	// Session会话
	// 传入可访问shell文件地址和对方服务器语言
	ExploitWithAttack(ctx context.Context, in *ExploitWithAttackReq, opts ...client.CallOption) (*ExploitWithAttackRsp, error)
	// 批量攻击(返回task_id列表)
	ExploitWithFlood(ctx context.Context, in *ExploitWithFloodReq, opts ...client.CallOption) (*ExploitWithFloodRsp, error)
	// 获取task_id的状态(当任务完成时, 若客户端首次必得标记已读，后续将不再返回该任务id状态。若想获取则用-history参数)
	GetTaskStatus(ctx context.Context, in *GetTaskStatusReq, opts ...client.CallOption) (*GetTaskStatusRsp, error)
}

type exploitServiceExtService struct {
	c    client.Client
	name string
}

func NewExploitServiceExtService(name string, c client.Client) ExploitServiceExtService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "pb"
	}
	return &exploitServiceExtService{
		c:    c,
		name: name,
	}
}

func (c *exploitServiceExtService) ExploitWithAttack(ctx context.Context, in *ExploitWithAttackReq, opts ...client.CallOption) (*ExploitWithAttackRsp, error) {
	req := c.c.NewRequest(c.name, "ExploitServiceExt.ExploitWithAttack", in)
	out := new(ExploitWithAttackRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exploitServiceExtService) ExploitWithFlood(ctx context.Context, in *ExploitWithFloodReq, opts ...client.CallOption) (*ExploitWithFloodRsp, error) {
	req := c.c.NewRequest(c.name, "ExploitServiceExt.ExploitWithFlood", in)
	out := new(ExploitWithFloodRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exploitServiceExtService) GetTaskStatus(ctx context.Context, in *GetTaskStatusReq, opts ...client.CallOption) (*GetTaskStatusRsp, error) {
	req := c.c.NewRequest(c.name, "ExploitServiceExt.GetTaskStatus", in)
	out := new(GetTaskStatusRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExploitServiceExt service

type ExploitServiceExtHandler interface {
	// Session会话
	// 传入可访问shell文件地址和对方服务器语言
	ExploitWithAttack(context.Context, *ExploitWithAttackReq, *ExploitWithAttackRsp) error
	// 批量攻击(返回task_id列表)
	ExploitWithFlood(context.Context, *ExploitWithFloodReq, *ExploitWithFloodRsp) error
	// 获取task_id的状态(当任务完成时, 若客户端首次必得标记已读，后续将不再返回该任务id状态。若想获取则用-history参数)
	GetTaskStatus(context.Context, *GetTaskStatusReq, *GetTaskStatusRsp) error
}

func RegisterExploitServiceExtHandler(s server.Server, hdlr ExploitServiceExtHandler, opts ...server.HandlerOption) error {
	type exploitServiceExt interface {
		ExploitWithAttack(ctx context.Context, in *ExploitWithAttackReq, out *ExploitWithAttackRsp) error
		ExploitWithFlood(ctx context.Context, in *ExploitWithFloodReq, out *ExploitWithFloodRsp) error
		GetTaskStatus(ctx context.Context, in *GetTaskStatusReq, out *GetTaskStatusRsp) error
	}
	type ExploitServiceExt struct {
		exploitServiceExt
	}
	h := &exploitServiceExtHandler{hdlr}
	return s.Handle(s.NewHandler(&ExploitServiceExt{h}, opts...))
}

type exploitServiceExtHandler struct {
	ExploitServiceExtHandler
}

func (h *exploitServiceExtHandler) ExploitWithAttack(ctx context.Context, in *ExploitWithAttackReq, out *ExploitWithAttackRsp) error {
	return h.ExploitServiceExtHandler.ExploitWithAttack(ctx, in, out)
}

func (h *exploitServiceExtHandler) ExploitWithFlood(ctx context.Context, in *ExploitWithFloodReq, out *ExploitWithFloodRsp) error {
	return h.ExploitServiceExtHandler.ExploitWithFlood(ctx, in, out)
}

func (h *exploitServiceExtHandler) GetTaskStatus(ctx context.Context, in *GetTaskStatusReq, out *GetTaskStatusRsp) error {
	return h.ExploitServiceExtHandler.GetTaskStatus(ctx, in, out)
}
